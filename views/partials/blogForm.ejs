<% if (locals.blog) { %>
  <div class="modal fade" id="formModal" tabindex="-1" aria-labelledby="formModalLabel" aria-hidden="true">
    <div class="modal-flex-container">
      <div class="modal-dialog">
        <form action="/blogs" class="modal-content" id="blog-form" method="POST">
          <div class="modal-header">
            <h5 class="modal-title" id="formModalLabel"><%= blog.id ? "Edit blogpost" : "Create new blogpost"%></h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close modal."></button>
          </div>
 
          <!-- Inputs -->
          <div class="modal-body">
            <div class="formModal__input-container">
              <label for="title">Title <span class="formModal__asterisk">*</span></label>
              <input required class="text-field-check-required text-field-check-max" type="text" name="title" id="title" value="<%= blog.title %>">
            </div>

            <div class="formModal__input-container">
              <label for="abstract">Abstract <span class="formModal__asterisk">*</span></label>
              <input required class="text-field-check-required text-field-check-max" type="text" name="abstract" id="abstract" value="<%= blog.abstract %>">
            </div>

            <div class="formModal__input-container">
              <label for="blogBody">Body <span class="formModal__asterisk">*</span></label>
              <textarea required class="text-field-check-required" rows="3" name="blogBody" id="blogBody"><%= blog.blogBody %></textarea>
            </div>

            <div class="formModal__input-container">
              <label for="blogImage">Image <i>(only .png, .jpeg and .gif)</i></label>
              <input type="file" name="blogImage" id="blogImage" class="filepond" data-filepond />
            </div>

            <div class="formModal__input-container">
              <label for="blogImageAltText">Image alternative text</label>
              <input type="text" name="blogImageAltText" id="blogImageAltText" value="<%= blog.blogImageAltText %>"></input>
            </div>

            <input type="hidden" id="id" name="id" value="<%= blog.id %>">
 
            <h6><i>Fields with an asterisk (<span class="formModal__asterisk">*</span>) are required.</i></h6>
          </div>
          <!-- /Inputs -->
 
          <!-- Buttons -->
          <div class="modal-footer">
            <button type="reset" class="project-button modal__button" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="project-continue-button modal__button" id="submit-button">Save changes</button>
          </div>
          <!-- /Buttons -->
        </form>
      </div>
    </div>
  </div>

  <script src="https://unpkg.com/filepond/dist/filepond.min.js"></script>
  <script>
    // Form Validation - check if the image user is trying to upload finished loading 
    const submitButton = document.getElementById('submit-button');
    let filepondFinishedUploading = true;

    document.addEventListener('FilePond:addfilestart', e => {
      filepondFinishedUploading = false;
      submitButton.setAttribute('aria-disabled', 'true');
    });

    document.addEventListener('FilePond:addfile', e => {
      filepondFinishedUploading = true;
      submitButton.removeAttribute('aria-disabled');
    });
    // Form Validation - check if the image user is trying to upload finished loading 

    // Form Validation - check max characters 
    let isMaxErrorVisible = false;

    function checkMaxCharacters() {
      if (this.value.length >= 15 && !isMaxErrorVisible) { // Create error sign 
        const RED = '#b50000';

        this.style.borderColor = RED;
        this.style.outlineColor = RED;

        const errorMessage = document.createElement('div');
        errorMessage.setAttribute('aria-live', 'assertive');
        errorMessage.style.bottom = '-2rem';
        errorMessage.style.color = RED;
        errorMessage.style.position = 'absolute';
        errorMessage.append('Please, type less than 15 characters');
        this.parentNode.append(errorMessage);

        isMaxErrorVisible = true;
      } else if (this.value.length < 15) { // Remove error sign 
        const errorMessage = this.parentNode.querySelector('div');

        if (errorMessage) {
          this.style.removeProperty('outline-color');
          this.style.removeProperty('border-color');
          
          errorMessage.remove();
        }

        isMaxErrorVisible = false;
      }
    }

    const textFieldsMax = Array.from(document.querySelectorAll('.text-field-check-max'));
    textFieldsMax.forEach(field => field.addEventListener('keydown', checkMaxCharacters));
    textFieldsMax.forEach(field => field.addEventListener('keyup', checkMaxCharacters));
    // Form Validation - check max characters 

    // Form Submit - check if it should make a POST or a PUT request 
    const textFieldsRequired = Array.from(document.querySelectorAll('.text-field-check-required'));
    
    function handleSubmit(e) {
      e.preventDefault();

      // Form Validation 
      if (!filepondFinishedUploading) { // Check if filepond finished uploading the image file 
        alert('Please wait for the image to finish uploading.');
        return;
      }
      
      // Check if required fields have been populated  
      const fieldsLongerThanMaximum = textFieldsMax.some(field => field.value.length >= 15);
      const fieldsNotFilled = textFieldsRequired.some(field => field.value.length === 0);
  
      if (fieldsNotFilled || fieldsLongerThanMaximum) {
        alert('Please, fill out all the required fields and keep to the maximum number of characters to continue.');
        return;
      }
      // /Form Validation 
      
      const id = document.getElementById('id').value;

      if (id) { // If there's an existing id, it's going to edit the blog that has it 
        blogForm.setAttribute('action', '/selected-blog?_method=PUT');
      } else { // Otherwise, is going to create a new one 
        blogForm.setAttribute('action', '/blogs');
      }
      
      blogForm.submit();
    }

    const blogForm = document.getElementById('blog-form');
    blogForm.addEventListener('submit', (e) => handleSubmit(e));
    // Form Submit - check if it should make a POST or a PUT request 
  </script>
<% } %>
